# Set globals
unamestr=`uname`

# Copy to clipboard
# Example
# $ echo 'hello' | copy
copy() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    pbcopy
  else
    xclip -selection c
  fi
}

# Paste from clipboard
# Example
# $ paste # pastes copies what's on clipboard
paste() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    pbpaste
  else
    xclip -selection clipboard -o
  fi
}

# Image width
# Example
# $ width image.png # 200
image_width() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    echo $(sips -g pixelWidth $1 | grep -oE "[[:digit:]]{1,}$")
  else
    identify -format '%w' "$1"
  fi
}

# Image height
# Example
# $ height image.png # 300
image_height() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    echo $(sips -g pixelHeight $1 | grep -oE "[[:digit:]]{1,}$")
  else
    identify -format '%h' "$1"
  fi
}

# Run dig and display the most useful info
# Example
# $ dig_all google.com
dig_all() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Copy with progress
# Example
# $ cp_p src/ dst/
cp_p() {
  rsync -WavP --human-readable --progress $1 $2
}

# Pretty print JSON
# Example
# $ echo '{"foo":"bar"}' | cjson
cjson() {
  local url=$(echo $1)
  if [[ "http" == $url[0,4] ]] ; then
    curl --silent $url | python -mjson.tool | pygmentize -O style=monokai -f console256 -g
  else
    cat $url | python -mjson.tool | pygmentize -O style=monokai -f console256 -g
  fi
}

# Curl pretty print with underscore
# Example
# $ curl_json_pretty_print http://example.com/data.json
curl_json_pretty_print() {
  local url="${1}"
  curl "$url" | underscore print --color | less -R
}

# Simple server
# Example
# $ server 3000 # visit http://localhost:3000
server() {
  local port="${1:-8000}"

  if [[ $* == *-o* ]]; then
    open "http://localhost:$port"
  fi

  python --version | grep 'Python 3' &> /dev/null

  if [ $? -eq 0 ]; then
    python -m http.server --bind 0.0.0.0 "$port"
  else
    python -m SimpleHTTPServer "$port"
  fi
}

server_open() {
  port="$1"
  open_port "$port"
  server "$port"
}

server_cors() {
  port="$1"
  npx http-server -p $port --cors="*"
}

# Display local IP
# Example
# $ ip_address # 10.10.10.192
ip_address() {
  # ifconfig getifaddr en0
  ifconfig | grep inet | grep broad | awk {'print $2'}
}

# List port procceses
# Example
# $ list_port_procceses 80
list_port_procceses() {
  lsof -i tcp:"${1}"
}

list_systemctl_ports() {
  sudo ss -lpntu
}

lsof_watch_dir() {
  local dir="."
  if [ ! -z "$1" ]; then
    dir="$1"
  fi
  #  note: use lowercase "+d" to not descend directories
  lsof +D "$dir" -r 1
}

lsof_watch_user() {
  local user=$(whoami)
  if [ ! -z "$1" ]; then
    user="$1"
  fi
  lsof -u "$user" -r 1
}

# Git push shortcut
# Example
# $ git_add_commit_push "my message"
git_add_commit_push() {
  local msg="${1}"
  git add . && git commit -m "$msg" && git push -u
}

# Undo a git commit ammend
# Example
# $ git_undo_ammend
git_undo_ammend() {
  git reset --soft HEAD@{1}
}

# Git blame a line
# Example
# $ git_blame_line 25 src/index.ts
git_blame_line() {
  git blame -L $1,+1 -- $2
}

git_first_commit() {
  git rev-list --max-parents=0 HEAD
}

# shows dff commits
git_branch_commits() {
  local branch="${1:-$(git branch --show-current)}"
  git cherry -v develop $branch
}

# show full path of modified files
git_status_full() {
  git status --porcelain
}

# show changed files after commit
git_changed_files() {
  git whatchanged -n 1
}

git_install_submodules() {
  git submodule update --init --recursive
}

git_reset_origin_head() {
  git fetch origin
  git reset --hard origin/master
}

git_list_recent_branches() {
  git branch --sort=-committerdate | head -n 10
}

git_list_recent_branches_all() {
  git branch --sort=-committerdate
}

git_show_patch_head() {
  git diff HEAD~1 HEAD
}

git_rm_cached() {
  git rm -r --cached .
}

git_merge_theirs() {
  branch=$1
  git merge --abort
  # git pull -X theirs
  git merge $branch -X theirs
}

git_show_last_few_commit_changes() {
  number="${1:-3}" # default to 3
  git log -p "-$number"
}

github_action_status() {
  gh run watch --exit-status && echo "run completed and successful"
}

# Get load average
# Example
# $ load_average
load_average() {
  uptime | awk '{ s = ""; for (i = 10; i <= NF; i++) s = s $i " "; print s }'
}

# Get HTTP Headers only
# Example
# $ headers google.com
headers() {
  curl -s -D - "${1}" -o /dev/null
}

# Open local server
# Example
# $ open_port 3000 # goes to http://localhost:3000
open_port() {
  if [[ ${1} =~ ^[0-9]{4}$ ]]; then
    open "http://localhost:$1"
  else
    open "$@"
  fi
}

# Open item
# Example
# $ open http://localhost:3000 # goes to browser
# $ open . # open file explorer
open() {
  if command_exists 'xdg-open'; then
    if [[ ${1} =~ ^[0-9]{4}$ ]]; then
      xdg-open "http://localhost:$1"
    else
      xdg-open "$@"
    fi
  else
    open "$@"
  fi
}

# File search. Pass path and regex
# Example
# $ file_search 'index.js' ./
file_search() {
  find ${2} -name ${1} -not -path '*/node_modules/*'
}

# Recursive search and replace text
# Example
# $ search_replace ./ "*.js" temp foo
search_replace() {
  replace_or_print='-pi';
  if [ "$5" == "dry" ]; then
    replace_or_print='-p';
  fi
  find "${1}" -name "${2}" -print0 | xargs -0 perl ${replace_or_print} -e ${5} "s/${3}/${4}/g"

  #perl -pi -w -e 's/foolate/template/g;' bower_components/**/*.js
}

# Confirm dialog
# Example
# $ confirm 'continue?' && echo 'hello'
confirm() {
  # call with a prompt string or use a default
  read -r -p "${1:-Are you sure? [y/N]} " response
  case $response in
      [yY][eE][sS]|[yY])
          true
          ;;
      *)
          false
          ;;
  esac
}

# Encode base64 string
# Example
# $ base64_encode 'hello' # aGVsbG8=
base64_encode() {
  #echo -n ${1} | openssl base64
  node -e "process.stdout.write(Buffer.from(process.argv[1]).toString('base64'))" ${1}
}

# Decode base64 string
# Example
# $ base64_decode aGVsbG8= # hello
base64_decode() {
  #echo -n ${1} | openssl enc -base64 -d
  #echo -n ${1} | openssl base64 -d
  #echo -n ${1} | base64 --decode
  node -e "process.stdout.write(Buffer.from(process.argv[1], 'base64').toString('utf8'))" ${1}
}

base64_encode_stdin() {
  openssl base64 -in - | tr -d '\n'
}

# Unarchive files
# Example
# $ extract file.tar.gz
extract() {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }

filesizebytes() {
  stat --printf="%s" "$1"
}

# Copy and go to directory
# Example
# $ cp_g foo/ bar/
cp_g() {
  cp $1 $2 && cd $2
}

# Move and go to directory
# Example
# $ mv_g foo/ bar/
mv_g() {
  mv $1 $2 && cd $2
}

# Make directory and go to it
# echo $TMPDIR
# Example
# $ cdmkdir foo/
cdmkdir() {
  command mkdir $1 && cd $1
}

mkdircd() {
  command mkdir $1 && cd $1
}

# Make a temp directory and go to it
# Example
# $ cdmktemp
cdmktemp() {
  cd $(mktemp -d)
}

mktempcd() {
  cd $(mktemp -d)
}

# Set output volume
# Example
# $ volume 3.5
volume() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    if [ ! -z "$1" ]; then
      # volume range: 0-7
      osascript -e "set Volume $1"
    else
      echo 'Enter volume 0-10'
    fi
  else
    if [ ! -z "$1" ]; then
      # alsamixer
      amixer sset 'Master' "$1%"
    else
      echo 'Enter volume 0-100'
    fi
  fi
}

# Mute volume
# Example
# $ volume_mute
volume_mute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer sset 'Master' mute
    amixer sset 'Speaker' mute
    amixer sset 'Bass Speaker' mute
  fi
}

# Unmute volume
# Example
# $ unvolume_mute
volume_unmute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer sset 'Master' unmute
    amixer sset 'Speaker' unmute
    amixer sset 'Bass Speaker' unmute
  fi
}

# Toggles mute
volume_toggle() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer -D pulse set Master 1+ toggle
  fi
}

volume_inc() {
  if [[ "$unamestr" == 'Linux' ]]; then
    ~/.bin/volume_controls up
  fi
}

volume_dec() {
  if [[ "$unamestr" == 'Linux' ]]; then
    ~/.bin/volume_controls down
  fi
}

mute() {
  volume_toggle
}

volume_controls() {
  if [[ "$unamestr" == 'Linux' ]]; then
    pavucontrol
  fi
}

mic_mute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer set Capture nocap
  fi
}

mic_unmute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer set Capture cap
  fi
}

mic_toggle() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer set Capture toggle
  fi
}

mic() {
  mic_toggle
}

# Kill processes based on regular expression
# Example
# $ kill_regex /node/
kill_regex() {
  kill $(ps aux | grep $1 | awk '{print $2}')
}

# Grep search count
# Example
# $ grep_search_count file.txt # 10
grep_search_count() {
  grep -ohr $1 $2 | wc -l
}

# Rotate Tmux windows every n seconds
# Example
# tmux_rotate
tmux_rotate() {
  TIME=${2:-30}
  watch -n$TIME tmux next-window -t $1
}

# show TTY ids of panes
tmux_list_pane_tty() {
  tmux list-panes -F "#W #{pane_id} #{pane_tty}" -t $(tmux display-message -p '#W')
}

# Check if command exists
# Example
# $ command_exists foobar && echo 'exists'
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Vim specific to OS
# Example
# $ vim
function vim() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    local macvim="/usr/local/Cellar/vim/$(ls /usr/local/Cellar/vim/ | tail -1)/bin/./vim"
    eval $macvim $@
  else
    if grep -q NAME=Fedora /etc/os-release; then
      if command_exists 'gvim'; then
        local fedoravim="/usr/bin/gvim -v"
        eval $fedoravim $@
      else
        echo "Copy to clipboard might not work. Use \`gvim -v\` instead."
        echo "Install with \`sudo dnf install vim-X11\`"
        sleep 2
        local linuxvim="/usr/bin/vim"
        eval $linuxvim $@
      fi
    else
      local linuxvim="/usr/bin/vim"
      eval $linuxvim $@
    fi
  fi
}

# Sublime specific to OS
# Example
# $ open_sublime file.txt
open_sublime() {
  macsubl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"

  if [[ "$unamestr" == 'Darwin' ]]; then
    eval $macsubl $@
  else
    eval $(which subl) $@
  fi
}

# Inkscape specific to OS
# Example
# $ open_inkscape
open_inkscape() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    local macinkscape='/Applications/Inkscape.app/Contents/Resources/bin/inkscape'
    eval $macinkscape
  else
    eval $(which inkscape)
  fi
}

# List permissions as octal
# Example
# $ ls_octal_perms
ls_octal_perms() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    stat -f '%A %a %N' *
  else
    stat -c "%a %n" *
  fi
}

# Shuffle
# Example
# $ ls -l | shuf
shuf() {
    awk 'BEGIN{srand();} {printf "%06d %s\n", rand()*1000000, $0;}' | sort -n | cut -c8-
}

# Random figlet font
# Example
# $ figlet_random 'hello'
figlet_random() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    figlet -f $(ls /usr/local/Cellar/figlet/2.2.5/share/figlet/fonts/*.flf | shuf | sed -n '1p') $1
  fi
}

# Display wifi SSID connected to
# Example
# $ ssid
ssid() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'
  else
    iwgetid
  fi
}

# DNS TXT record lookup
# Example
# $ dns_txt google.com
dns_txt() {
  curl -X POST "https://mdxnorq9nj.execute-api.us-west-2.amazonaws.com/prod/txt" -d '{"domain": "'"$1"'"}'
}

# Resize image
# Example
# $ resize input.jpg 200 output.png
resize() {
  convert "$1" -resize "$2" "$3"
}

# Generate SHA3-256 hash (not keccak-256)
# Example
# sha3 'hello' # 3338be694f50c5f338814986cdf0686453a888b84f424d792af4b9202398f392
sha3() {
  echo -n "$1" | rhash --sha3-256 -
}

keccak256() {
  echo -n "$1" | keccak-256sum
}

# Capture stdout of process
# Example
# $ capture 3021
capture() {
    sudo dtrace -p "$1" -qn '
        syscall::write*:entry
        /pid == $target && arg0 == 1/ {
            printf("%s", copyinstr(arg1, arg2));
        }
    '
}

# kill all processes returned by grep
# grepkill "Chrome"
grep_kill() {
  ps aux | grep -i $1 | awk '{print $2}' | xargs sudo kill
}

# Check SSL cert validity dates.
# Example
# $ cert_dates github.com
cert_dates() {
  # echo makes it not hang
  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates
}

# kill process by name or port
# example:
# fkill someapp :8080 node :1111
fkill() {
  for i in $@;
  do
      export q=$i;
      if [[ $i == :* ]]; then
          lsof -i$i | sed -n '1!p';
      else
          ps aux | grep --color=auto -i $i | grep --color=auto -v grep;
      fi | awk '{print $2}' | xargs -I@ sh -c 'kill -9 @ 2&>1 &&printf "X %s->%s\n" $q @';
  done
}

# Convert bytes to human readable format.
# Example
# $ bytes2mb 511705088 # 488 mb
bytes2human() {
  local B=$1
  [ $B -lt 1024 ] && echo ${B} bytes
  local KB=$(((B+512)/1024))
  [ $KB -lt 1024 ] && echo ${KB} kb
  local MB=$(((KB+512)/1024))
  [ $MB -lt 1024 ] && echo ${MB} mb
  local GB=$(((MB+512)/1024))
  [ $GB -lt 1024 ] && echo ${GB} gb
  echo $(((GB+512)/1024)) terabytes
}

# Authorize public key for SSH login
# Example
# $ ssh_add_public_key root@1.2.3.4
ssh_add_public_key() {
  cat ~/.ssh/id_rsa.pub | ssh $1 "cat >> ~/.ssh/authorized_keys"
}

ssh_agent_start() {
  systemctl --user enable ssh-agent
  systemctl --user start ssh-agent
  eval "$(ssh-agent -s)"
  # ssh-agent bash # for local shell only
  ssh-add -l
}

# Example
# ssh_agent_add_key ~/.ssh/id_rsa
ssh_agent_add_key() {
  ssh-add "$1"
}

# SSH using password
# Example
# $ ssh_password root@example.com
ssh_password() {
  ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no "$@"
}

ssh_remove_cached_keys() {
  ssh-add -D
}

ssh_list_cached_keys() {
  ssh-add -l
}

ssh_test_connection() {
  ssh -T git@github.com
  # ssh -T git@github.com-example
}

# Make a temporary directory and enter it
# Example
# tmpd
tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

# Create a data URI from a file
# Example
# datauri file.txt
datauri() {
	local mimeType
	mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
# Example
# $ cert_names google.com
cert_names() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo ""; # newline

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# List dependencies of Go project
# Example
# $ go_list_deps
go_list_deps() {
	(
	if [[ ! -z "$1" ]]; then
		gogo "$@"
	fi

	go list -e -f '{{join .Deps "\n"}}' ./... | xargs go list -e -f '{{if not .Standard}}{{.ImportPath}}{{end}}'
	)
}

# Get colors in manual pages
# Example
# $ man cat
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# UTF-8-encode a string of Unicode symbols
# Example
# $ escape {args}
escape() {
	local args
	mapfile -t args < <(printf "%s" "$*" | xxd -p -c1 -u)
	printf "\\\\x%s" "${args[@]}"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
# Example
# $ unidecode '\N{U+0041}' # A
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Get a character’s Unicode code point
# Example
# $ codepoint A # U+0041
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Generate a random password string
# Example
# $ generate_password
generate_password() {
  openssl rand -base64 32
}

ethereum_generate_private_key() {
  node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
}

# Get the DNS host of an EC2 instance
# Example
# $ ec2_dns i-0faf8a75466c54ec5
ec2_dns() {
  region="us-east-1"
  if [ ! -z "$2" ]; then
    region="$2"
  fi
  if [ -z "$1" ]; then
    echo 'instance id is required'
    return
  fi
  aws ec2 describe-instances --instance-ids="$1" --region="$region"| jq '.Reservations[].Instances[] | "\(.PublicDnsName)"' | sed -e "s/\"//g"
}

# Get the IP address of an EC2 instance
# Example
# $ ec2_ip i-0faf8a75466c54ec5
ec2_ip() {
  region="us-east-1"
  if [ ! -z "$2" ]; then
    region="$2"
  fi
  if [ -z "$1" ]; then
    echo 'instance id is required'
    return
  fi
  aws ec2 describe-instances --instance-ids="$1" --region="$region" | jq '.Reservations[].Instances[] | "\(.PublicIpAddress)"' | sed -e "s/\"//g"
}

# Change MAC address
# Example
# $ change_mac
change_mac() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    local mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    interface="en0"
    sudo ifconfig $interface down
    sudo ifconfig $interface ether $mac
    sudo ifconfig $interface up
    echo "Your new physical address is $mac"
  elif [ -f "/etc/arch-release" ]; then
    local interface="wlp3s0"
    sudo ifconfig $interface down
    sudo macchanger -A $interface
    sudo ifconfig $interface up
  else
      echo "distro not supported"
  fi
}

# Print the Wifi password
# Example
# $ wifi_pass
# $ wifi_pass MyWifiSSID
wifi_pass() {
  local ssid="$(airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')"
  if [ ! -z "$1" ]; then
    ssid="$1"
  fi

  security find-generic-password -ga "$ssid" 2>&1 | grep password: | cut -d '"' -f2
}

# Restart the wifi network manager
# Example
# $ restart_wifi
restart_wifi() {
  sudo ifconfig wlp4s0 down
  sudo ifconfig wlp4s0 up
  if command_exists 'nm-online'; then
    sudo service network-manager restart
  fi
}

forget_network() {
  nmcli connection delete "$1"
}

update_dns() {
  SSID=$(nmcli -t -f name,device connection show --active | grep wlp3s0 | cut -d\: -f1)
  nmcli con mod "$SSID" ipv4.ignore-auto-dns yes
  nmcli con mod "$SSID" ipv4.dns "1.1.1.1 8.8.8.8"
  nmcli con down "$SSID"
  nmcli con up "$SSID"
  cat /etc/resolv.conf
}

# Example:
# $ find_systemctl_file docker.service
find_systemctl_file() {
  systemctl show -p FragmentPath $1
}

restart_network_manager() {
  sudo systemctl restart NetworkManager.service
}


# Print all log commit hashes
# Example
# $ git_log_all_commits
git_log_all_commits() {
  git --no-pager log --pretty=oneline | awk '{print $1}'
}

git_log_history_search() {
  git log --all --grep="$1"
}

# Convert a PNG image to SVG (requires `imagemagick` and `potrace`)
# Example
# $ png_to_svg image.png # outputs image.svg
# $ png_to_svg image.png out.svg # outputs out.svg
png_to_svg() {
  local tempfile=$(mktemp).pnm
  convert "$1" "$tempfile"

  local outfile=$(basename "$1" .png).svg
  if [ ! -z "$2" ]; then
    outfile="$2"
  fi

  potrace "$tempfile" -s -o "$outfile"
  rm -f "$tempfile"
}

# Add SSH key as authorized key on server
# Example
# $ ssh_copy_key_id root@example.com
ssh_add_authorized_key() {
  cat ~/.ssh/id_rsa.pub | ssh "$1" "cat >> ~/.ssh/authorized_keys"
}

# Read an environment variable from a .env file
# Example
# $ read_var FOO [.env]
read_var() {
  if [ -z "$1" ]; then
    echo "environment variable name is required"
    return 1
  fi

  local ENV_FILE='.env'
  if [ ! -z "$2" ]; then
    ENV_FILE="$2"
  fi

  # NOTE: will not read full entry if there's an equals sign in the value
  local VAR=$(grep $1 "$ENV_FILE" | xargs)
  IFS="=" read -ra VAR <<< "$VAR"
  echo ${VAR[1]}
}

# Delete all git branches except current one
# Example
# $ git_delete_all_local_branches
git_delete_all_local_branches() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  git branch | grep -vw "$current_branch" | xargs git branch -D
}

git_delete_local_branch() {
  git branch -D "$1"
}

# Alias hub to git if exists
# Example
# $ git pull-request
# TODO: doesn't work on urxvt; it hangs
#git() {
#  command -v hub >/dev/null 2>&1 && hub "$@" || $(which git) "$@"
#}

# Length of string
# Example
# $ echo -n abc | length
length() {
  read a;
  echo -n $a | wc -c
}

# Lock computer
# Example
# $ lock
lock() {
  if [[ "$unamestr" == 'Linux' ]]; then
    if command_exists 'i3lock'; then
      i3lock -n -c 000000
    elif command_exists 'xscreensaver-command'; then
      xscreensaver-command -lock
    else
      echo 'no lock program found'
    fi
  fi
}

delayed_lock() {
  sleep 7; lock
}

start_screensaver() {
  xscreensaver &
  xscreensaver-settings
}

# Get all local IP addreses in network
# Example
# $ scan_ips
scan_ips() {
  sudo arp-scan -l | awk '{print $1}' | tail -n +3 | head -n -2
}

# Opens system monitor
# Example
# $ system_monitor
system_monitor() {
  if [[ "$unamestr" == 'Linux' ]]; then
    gnome-system-monitor
  fi
}

battery_time() {
  if [[ "$unamestr" == 'Linux' ]]; then
    upower -d | grep time | cut -d' ' -f 14-
  fi
}

battery_capacity() {
  if [[ "$unamestr" == 'Linux' ]]; then
    upower -d | grep capacity | awk '{print $2}'
  fi
}

resolution() {
  if [[ "$unamestr" == 'Linux' ]]; then
    xdpyinfo | awk '/dimensions/{print $2}'
  fi
}

ps_top_memory() {
  ps aux --sort=-%mem | awk 'NR<=10{print $0}'
}

ps_top_cpu() {
  ps -aux --sort -pcpu | head
}

keyboard_disable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # ubuntu on macbook pro
    local id=$(xinput list | sed -nE 's/.*Apple.*Keyboard.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput float $id"
    xinput float $id
  fi
}

keyboard_enable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # ubuntu on macbook pro
    local id=$(xinput list | sed -nE 's/.*Apple.*Keyboard.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput reattach $id 3"
    xinput reattach $id 3
  fi
}

touchpad_enable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    synclient TouchpadOff=0
    synclient MaxTapTime=1
    synclient PalmDetect=1
  fi
}

touchpad_disable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    synclient TouchpadOff=1
    synclient MaxTapTime=0
    synclient PalmDetect=0
  fi
}

keyboard_touchpad_disable() {
  touchpad_disable
  keyboard_disable
}

keyboard_touchpad_enable() {
  touchpad_enable
  keyboard_enable
}

touchscreen_disable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # lenovo thinkpad t480
    local id=$(xinput list | sed -nE 's/.*Touch System.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput disable $id"
    xinput disable $id
  fi
}

touchscreen_enable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # lenovo thinkpad t480
    local id=$(xinput list | sed -nE 's/.*Touch System.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput enable $id"
    xinput enable $id
  fi
}

update_wallpaper() {
  if [ ! -z "$1" ]; then
    feh --bg-scale --zoom fill "$1"
  else
    if [ -f ~/Downloads/wallpaper.jpg ] ; then
      mv ~/Downloads/wallpaper.jpg ~/.local/share/wallpaper.jpg
    fi

    feh --bg-scale --zoom fill ~/.local/share/wallpaper.jpg
  fi
}

# usage: set_wallpaper ~/Downloads/wallpaper.jpg
set_wallpaper() {
  feh --bg-scale --zoom fill "$1"
}

somafm_stream() {
  curl -vs http://ice1.somafm.com/defcon-128-mp3 2>&1 | mpv -
}

ubuntu_version() {
  cat /etc/*release | grep VERSION | head -1
}

afk() {
  echo 'suspending (sleep)...'
  if [[ "$unamestr" == 'Darwin' ]]; then
    /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend
  else
    systemctl suspend
  fi
}

hibernate() {
  echo 'hibernating...'
  if [[ "$unamestr" == 'Linux' ]]; then
    systemctl hibernate
  fi
}

restart_sxhkd() {
  pkill sxhkd; sxhkd &
}

reload_dunst() {
  pkill dunst && dunst &
}

localip() {
  if [ -f "/etc/arch-release" ]; then
    ip addr show wlan0 | awk '$1 == "inet" {gsub(/\/.*$/, "", $2); print $2}'
  elif [[ "$unamestr" == 'Darwin' ]]; then
    ifconfig wlan0 | awk '$1 == "inet" {print $2}'
  else
    ifconfig
  fi
}

arch_update() {
  sudo pacman -Syu
}

restart_smb() {
  systemctl restart smb
}

enable_smb() {
  systemctl enable smb
}

start_smb() {
  systemctl start smb
}

stop_smb() {
  systemctl stop smb
}

disable_smb() {
  systemctl disable smb
}

update_pacman() {
  sudo pacman -Sy archlinux-keyring
  sudo pacman -Syu
}

remove_corrupt_pacman_files() {
  sudo find /var/cache/pacman/pkg/ -iname "*.part" -delete
}

pacman_clean_cache() {
  sudo pacman -Sc
  if command_exists 'yay'; then
    yay -Sc
  fi
}

pacman_list_by_install_date() {
  for i in $(pacman -Qq)
  do
    grep "\[ALPM\] installed $i" /var/log/pacman.log
  done | \
    sort -u | \
    sed -e 's/\[ALPM\] installed //' -e 's/(.*$//'
}

start_vnc() {
  x11vnc -many -usepw -localhost -display :0
}

stop_vnc() {
  fkill vnc
}

vnc_resize_macbook_air() {
  xrandr -s 1400x900
}

vnc_resize_thinkpad() {
  xrandr -s 1920x1080
}

vnc_tunnel() {
  ssh -L 5900:localhost:5900 user@host 'x11vnc -localhost -display :0'
}

xrandr_auto() {
  xrandr --auto
  xlayoutdisplay
  # autorandr
}

xrandr_mirror() {
  xrandr --output eDP-1 --mode 1920x1080 --output HDMI-2 --mode 1920x1080 --same-as eDP-1
}

xrandr_turn_off_main_display() {
  xrandr --output eDP-1 --off --auto
}

xrandr_resize_monitor() {
  xrandr -s 2560x1440
}

xrandr_resize_macbook_air() {
  xrandr -s 1400x900
}

xrandr_resize_thinkpad() {
  xrandr -s 1920x1080
}

xrandr_change_primary() {
  xrandr --output eDP-1 --off --output HDMI-2 --primary --mode 2560x1440
}

xrandr_left_of() {
  xrandr --output eDP-1 --left-of HDMI-2 --auto
}

xrandr_right_of() {
  xrandr --output eDP-1 --right-of HDMI-2 --auto
}

xrandr_bottom_of() {
  xrandr --output eDP-1 --auto --pos 320x1440 --output HDMI-2 --auto --pos 0x0
}

xrandr_list() {
  xrandr --listactivemonitors
}

xrandr_gui() {
  arandr
}

reload_workspaces() {
  monitors=$(xrandr -q | grep -w connected | awk '{print $1}')
  for m in $monitors; do
    bspc monitor $m -d $m/{1..10}
  done
}

# Organize bspwm desktop workspaces.
# Call this after doing monitor changes with xrandr.
reload_desktop() {
  xrandr_auto
  monitors=$(xrandr -q | grep -w connected | awk '{print $1}')
  if [[ $(echo "$monitors" | wc -l) -gt 1 ]]; then
    xrandr_turn_off_main_display
    xrandr_resize_monitor
  fi

  reload_workspaces
  restart_polybar
  fkill battery-combine.sh
  fkill microphone.sh
}

reload_xresources() {
  xrdb -load ~/.Xresources
}

renew_dhcp() {
  local interface="wlp3s0"
  sudo dhclient -v -r $interface
  restart_network_manager
}

restart_dhcpd() {
  systemctl restart dhcpcd.service
}

change_nameservers() {
  sudo vim /etc/dhcpcd.conf
  # add the following line:
  # static domain_name_servers=8.8.8.8 8.8.4.4
}

start_ufw() {
  systemctl start ufw.service
}

enable_ufw() {
  systemctl enable ufw.service
}

stop_ufw() {
  systemctl stop ufw.service
}

ufw_status() {
  sudo ufw status
}

restart_ufw() {
  sudo ufw disable
  sudo ufw enable
}

ufw_list() {
  sudo ufw status numbered
}

enable_sshd() {
  systemctl enable sshd.service
}

start_sshd() {
  systemctl start sshd.service
}

stop_sshd() {
  systemctl stop sshd.service
}

disable_sshd() {
  systemctl disable sshd.service
}

restart_sshd() {
  systemctl restart sshd.service
}

start_plex() {
  systemctl start plexmediaserver.service
}

stop_plex() {
  systemctl stop plexmediaserver.service
}

enable_plex() {
  systemctl enable plexmediaserver.service
}

disable_plex() {
  systemctl disable plexmediaserver.service
}

restart_plex() {
  systemctl restart plexmediaserver.service
}

enable_docker() {
  systemctl enable docker
}

start_docker() {
  systemctl start docker
}

stop_docker() {
  sudo systemctl stop docker
  sudo systemctl stop docker.socket
}

restart_docker() {
  systemctl restart docker
}

plex_logs() {
  tail -f /var/lib/plex/Plex\ Media\ Server/Logs/Plex\ Media\ Server.log
}

start_wireguard_vpn() {
  sudo wg-quick up wg0
}

stop_wireguard_vpn() {
  sudo wg-quick down wg0
}

vpn_connect() {
  mullvad connect
  sleep 1
  iplookup
}

vpn_disconnect() {
  mullvad disconnect
  sleep 1
  iplookup
}

vpn_status() {
  mullvad status
}

start_bluetooth() {
  sudo systemctl start bluetooth.service
  # blueman-applet &
}

stop_bluetooth() {
  sudo systemctl stop bluetooth.service
}

enable_bluetooth() {
  sudo systemctl enable bluetooth.service
}

disable_bluetooth() {
  sudo systemctl enable bluetooth.service
}

bluetooth_toggle() {
  echo todo
}

wifi_toggle() {
  if [ "$(nmcli radio wifi)" == "enabled" ] ; then
    echo 'turning wifi off'
    nmcli radio wifi off
  else
    echo 'turning wifi on'
    nmcli radio wifi on
  fi
}

replace_brackets_in_filenames() {
  for f in *\ *; do mv "$f" "${f//[/(}"; done
  for f in *\ *; do mv "$f" "${f//]/)}"; done
}

filepath () {
  if command_exists 'readlink'; then
    readlink -f "$1"
  else
    find "$(pwd)" -name "$1"
  fi
}

count_occurrences() {
  rg "$1" "$2" -c | cut -d':' -f2 | awk '{print $1}' | awk '{s+=$1} END {print s}'
}

reload_fonts() {
  fc-cache -vf
}

filetree() {
  ls -R | grep ":$" --color=never | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
}

publicip() {
  curl -s http://checkip.dyndns.com/ | sed 's/[^0-9\.]//g'
}

gateway_address() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    route -n get default | grep gateway | rev | cut -d: -f -1 | rev
  else
    # arch
    nmcli dev show wlp3s0 | grep -m1 GATEWAY | awk '{print $2}'
  fi
}

nameservers() {
  # macOS
  if command_exists 'scutil'; then
    scutil --dns | grep "nameserver\[[0-9]*\]"
  else
    cat /etc/resolv.conf
  fi
}

dnsserver() {
  nameservers
}

scan() {
  sudo nmap -sn `ip | rev | cut -d. -f 2- | rev`.0/24
}

scanV() {
  sudo nmap -v -A `ip | rev | cut -d. -f 2- | rev`.0/24
}

scan_host() {
  sudo nmap -O -v -sV # ip
}

# example
# scan_ports 127.0.0.1
scan_ports() {
  sudo nmap -p 1-65535 -T4 -A -v
}

port_open() {
  nmap 192.168.0.1 -Pn -p 9000 # check if port is open
}

scan_net() {
  arp -a # show IPs and MACs
}

arp_flush() {
  arp -d -a
}

macs() {
  sudo arp-scan -l
}

ngrep_get() {
  ngrep -W byline -qilw 'get' tcp dst port 80
}

tcpflow80() {
  sudo tcpflow -p -c -i en0 port 80 | grep -oE '(GET|POST|HEAD) .* HTTP/1.[01]|Host: .*'
}

http80() {
  #sudo httpry -i en0
  sudo httpry -i wlan0
}

start_wireshark() {
  sudo wireshark
}

dnslookup() {
  nslookup -type=soa
}

dns_flush() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    sudo killall -HUP mDNSResponder
  else
    systemctl restart nscd.service
    systemctl restart dnsmasq.service
  fi
}

ping_port() {
  sudo nping --tcp -p # ping_port <port> <host>
}

restart_mysql() {
  mysql.server restart
}

restart_apache() {
  sudo apache2ctl restart
}

virtualbox_load_modules() {
  # arch
  sudo vboxreload
}

tmuxp_load() {
  tmuxp load "~/.tmuxp/$1.yml"
}

kernel_info() {
  # arch
  hostnamectl
}

kernel_version() {
  uname -r
}

systemd_blame() {
  # arch
  systemd-analyze blame
}


ssh_dir_permissions() {
  # TODO: automate
  echo "
  .ssh directory: 700 (drwx------)
  public key (.pub file): 644 (-rw-r--r--)
  private key (id_rsa): 600 (-rw-------)
  home directory should not be writeable by the group or others (at most 755 (drwxr-xr-x))
  "
}

ssh_pem_permissions() {
  chmod 600 $1
}

git_ignore_blame() {
  git check-ignore -v "$1"
}

restart_gpg() {
  gpgconf --kill gpg-agent
}

fix_gnupg_file_permissions() {
  sudo chown -R $(whoami) ~/.gnupg/;
  sudo find ~/.gnupg -type f -exec chmod 600 {} \;
  sudo find ~/.gnupg -type d -exec chmod 700 {} \;
}

ip_mac() {
  sudo nmap -sn "$1"
}

# Example
# lsblk
# sudo umount /dev/sd/<?><?>
# burn_iso ~/Downloads/linux.iso /dev/sd/<?>
burn_iso() {
  set -eux
  if [ ! -f "$1" ]; then
    echo 'File not found'
    exit 1
  fi

  sudo dd bs=4M if="$1" of="$2" conv=fdatasync status=progress
}

pcmanfm_desktop_settings () {
  pcmanfm --desktop-pref
}

start_pcmanfm_desktop () {
  pcmanfm --desktop &
}

stop_pcmanfm_desktop () {
  pcmanfm --desktop-off
}

update_mirrorlist() {
  pacman -Syyu
}

# see which packages depends on supplied package
pacman_depends_on() {
  pacman -Qi $1
  #pacman -Sii $1
}

# Example:
# pacman_who_owns
# $ pacman_who_owns /usr/lib/python3.8/site-packages/OpenSSL/crypto.py
# error: No package owns /usr/lib/python3.8/site-packages/OpenSSL/crypto.py
pacman_who_owns() {
  pacman -Qo $1
}

restart_polybar() {
  fkill polybar
  ~/.config/polybar/polybar.sh "$@" &
}

echostderr() {
  >&2 echo "$@"
}

# https://stackoverflow.com/a/4455706/1439168
color()(set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[31m&\e[m,'>&2)3>&1

google() {
  Q="$@";
  GOOG_URL='https://www.google.de/search?tbs=li:1&q=';
  AGENT="Mozilla/4.0";
  stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||; s|&amp||');
  echo -e "${stream//\%/\x}";
}

streamhut_shell() {
  exec &> >(nc localhost 1337)
}

# show exif data from image
exif() {
  # arch linux install:
  # yay -S perl-image-exiftool

  exiftool "$1"
}

# remove exif data from image
exif_remove() {
  # leave space after equals
  exiftool -all= "$1"
}

# $ showcolor "#ff0000"
showcolor() {
	printf '\e]4;1;%s\a\e[0;41m  \e[m' "$1"
}

cointop_sha256() {
  local version=$(curl --silent "https://api.github.com/repos/cointop-sh/cointop/releases/latest" | grep -Po --color=never '"tag_name": "\K.*?(?=")')
  local url="https://github.com/cointop-sh/cointop/archive/$version.tar.gz"
  echo $url
  wget_sha256 "$url"
}

countdown(){
  if [ -z "$1" ]; then
    echo "time in seconds is required"
    return
  fi
  ts=$(($(date +%s) + $1));
  while [ "$ts" -ge $(date +%s) ]; do
    echo -ne "$(date -u --date @$(($ts - $(date +%s))) +%H:%M:%S)\r"
    sleep 0.1
  done
}

stopwatch() {
  # ctrl-d to stop
  time read
}

stopwatch2() {
  ts=$(date +%s)
  while true; do
    echo -ne "$(date -u --date @$(($(date +%s) - $ts)) +%H:%M:%S)\r"
    sleep 0.1
  done
}

rehash() {
  hash -r
}

reload_udev_rules() {
  sudo udevadm control --reload-rules && udevadm trigger
}

# shows list of manuals available in demu. On selection it converts man page to pdf and opens it in viewer
mansplain() {
  man -k . | dmenu -l 30 | awk '{print $1}' | xargs -r man -Tpdf | zathura -
}

# example
# mount_usb /dev/sdb1
mount_usb() {
  udisksctl mount -b "$1"
}

# example
# unmount_usb /dev/sdb1
unmount_usb() {
  udisksctl unmount -b "$1"
}

# example
# poweroff_usb /dev/sdb
poweroff_usb() {
  udisksctl power-off -b "$1"
}

restart_pulseaudio() {
  killall pulseaudio; pulseaudio --kill; pulseaudio --start
}

open_cups() {
  open http://localhost:631/
}

enable_cups() {
  systemctl enable cups.service
  systemctl enable cups-browsed.service
}

start_cups() {
  systemctl start cups.service
  systemctl start cups-browsed.service
}

list_all_executables() {
  compgen -c | sort -u
}

dec2hex() {
  node -e "console.log('0x'+BigInt(\"$1\").toString(16))"
}

hex2dec() {
  node -e "console.log(BigInt('0x'+\"$1\".replace('0x', '')).toString())"
}

hex2utf8() {
  node -e "console.log(Buffer.from(\"$1\".replace('0x', ''), 'hex').toString('utf8'))"
}

hex2ascii() {
  node -e "console.log(Buffer.from(\"$1\".replace('0x', ''), 'hex').toString('ascii'))"
}

# $ ps_info <psid>
ps_info() {
  ps -p $1 -o command
}

# $ ps_port_info 4000
ps_port_info() {
  ps_info $(lsof -t -i tcp:$1)
}

# Returns process id of port
# $ port_ps 4000
port_ps() {
  lsof -t -i tcp:$1
}

# Find version of GTK installed
gtk_version() {
  gtk-launch --version
}

spellcheck() {
  for f in *.txt ; do echo $f ; aspell list < $f | sort | uniq -c ; done
}

pip_install_requirements() {
  python3 -m pip install -r requirements.txt
}

yay_build_install() {
  makepkg --install .
}

iplookup() {
  if [ -f "/etc/arch-release" ]; then
    if ! command_exists 'geoiplookup'; then
      yay -S geoip
    fi
  fi
  ip="$1"
  if [ -z "$1" ]; then
    ip=$(publicip)
  fi
  echo "$ip"
  geoiplookup $ip
}

nvm_set_default() {
  nvm alias default $1
}

npm_list_symlink_node_modules() {
  ( ls -l node_modules ; ls -l node_modules/@* ) | grep ^l
}

pretty_csv() {
  column -t -s, "$@" | less -S
}

start_opensnitch() {
  systemctl start opensnitchd
}

stop_opensnitch() {
  systemctl stop opensnitchd
}

open_opensnitch() {
  sudo opensnitch-ui
}

4byte() {
  local id="$1"
  if [ -z "$id" ]; then
    echo "4byte id is required"
    return
  fi
  local url="https://www.4byte.directory/api/v1/signatures/?hex_signature=$id"
  curl -s "$url" | jq -r '.results[].text_signature'
}

json_object_to_table() {
  jq -r '([keys[] | .] |(., map(length*"-"))), ([values[] as $v | $v]) | @tsv' | column -t -s $'\t'
}

json_array_to_table() {
  jq -r '(.[0] | with_entries(select(.value | type | . != "array" and . != "object")) | ([keys[] | .] |(., map(length*"-")))), (.[] | with_entries(select(.value | type | . != "array" and . != "object")) | ([keys[] as $k | .[$k]])) | @tsv' | column -t -s $'\t'
}

text_list_to_json_array() {
  jq -nR '[inputs]' $1
}

chainid() {
  curl -s https://chainid.network/chains.json | json_array_to_table | awk "NR <= 2 || /$1/"
}

ssh_public_key_fingerprint_md5() {
  local pub_key="$HOME/.ssh/id_rsa.pub"
  if [ ! -z "$1" ]; then
    pub_key="$1"
  fi
  ssh-keygen -lf "$pub_key" -E md5
}

ssh_public_key_fingerprint_sha256() {
  local pub_key="$HOME/.ssh/id_rsa.pub"
  if [ ! -z "$1" ]; then
    pub_key="$1"
  fi
  ssh-keygen -lf "$pub_key" -E sha256
}

ssh_key_test_pass() {
  keyfile="$1"
  ssh-keygen -y -f $keyfile
}

ssh_get_public_key_from_private() {
  keyfile="$1"
  ssh-keygen -y -f $keyfile
}

pip_package_build() {
  # pip install -U pip setuptools
  python setup.py sdist
}

pip_publish() {
  # pip install -U pip twine
  twine upload dist/*
}

pcal_run() {
  local filename="$1"
  pcal $filename && tlc $filename
}

tla_run() {
  tlc "$@" && echo PASS || echo FAIL
}

tla_pdf() {
  local filename="$1"
  local tex_filename=$(echo $filename | sed 's/.tla/.tex/')
  tlatex $filename && pdflatex $tex_filename
}


factorial () {
  if (($1 == 1))
  then
    echo 1
    return
  else
    echo $(( $( factorial $(($1 - 1)) ) * $1 ))
  fi
}

matic_checkpoint_check() {
  local block=$1
  curl -s "https://apis.matic.network/api/v1/mumbai/block-included/$block"
}

disable_snapd() {
  systemctl stop snapd.service
  systemctl stop snapd.socket
  systemctl stop snap.lxd.activate.service
  systemctl stop snap.lxd.daemon.unix.socket
  systemctl disable snapd.service
  systemctl disable snapd.socket
  systemctl disable snap.lxd.activate.service
  systemctl disable snap.lxd.daemon.unix.socket
}

awk_first() {
  read r && echo $r | awk 'NR==1{print $1}'
}

number_diff() {
  echo "scale=2;($1 / $2)*100" | bc
}

eth_rpc_url() {
  RPC_URL="$1"
  if [[ $1 != http* ]]; then
    RPC_URL="http://localhost:$1"
  fi
}

eth_rpc_clientVersion() {
  set -x
  RPC_URL=$1
  curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":1}' "$RPC_URL" | jq -r '.result'
  set +x
}

eth_rpc_chainId() {
  set -x
  RPC_URL=$1
  curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_chainId","params":[],"id":1}' "$RPC_URL" | jq -r '.result'
  set +x
}

eth_rpc_blockNumber() {
  set -x
  RPC_URL="$1"
  result=$(curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' "$RPC_URL" | jq -r '.result')
  hex2dec $result
  set +x
}

eth_rpc_getTransactionReceipt() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionReceipt\",\"params\":[\"$1\"],\"id\":1}" "$2"
  set +x
}

eth_rpc_getTransactionCount() {
  set -x
  result=$(curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionCount\",\"params\":[\"$1\", \"latest\"],\"id\":1}" "$2" | jq -r '.result')
  hex2dec $result
  set +x
}

eth_rpc_getTransactionCountPending() {
  set -x
  result=$(curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getTransactionCount\",\"params\":[\"$1\", \"pending\"],\"id\":1}" "$2" | jq -r '.result')
  hex2dec $result
  set +x
}

eth_rpc_base_fee() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false],"id":1}' "$1" | jq -r '.result.baseFeePerGas'
  set +x
}

eth_rpc_gasPrice() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_gasPrice","params":[],"id":1}' "$1" | jq -r '.result'
  set +x
}

eth_rpc_blobBaseFee() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blobBaseFee","params":[],"id":1}' "$1" | jq -r '.result'
  set +x
}

eth_rpc_getBalance() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBalance\",\"params\":[\"$1\", \"latest\"],\"id\":1}" "$2"
  set +x
}

eth_rpc_getCode() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getCode\",\"params\":[\"$1\", \"latest\"],\"id\":1}" "$2"
  set +x
}

eth_rpc_getBlockByHash() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByHash\",\"params\":[\"$1\", true],\"id\":1}" "$2"
  set +x
}

eth_rpc_getBlockByNumber() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByNumber\",\"params\":[\"$1\", true],\"id\":1}" "$2"
  set +x
}

eth_rpc_getBlockByHash() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByHash\",\"params\":[\"$1\", true],\"id\":1}" "$2"
  set +x
}

eth_rpc_getBlockRange () {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockRange\",\"params\":[\"0x1\", \"0x2\", false],\"id\":1}" "$1"
  set +x
}

eth_rpc_getBlockSafe () {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByNumber\",\"params\":[\"safe\", false],\"id\":1}" "$1"
  set +x
}

eth_rpc_getBlockFinal () {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"eth_getBlockByNumber\",\"params\":[\"finalized\", false],\"id\":1}" "$1"
  set +x
}

eth_rpc_blockNumberSafe() {
  result=$(eth_rpc_getBlockSafe $1 | jq -r '.result.number')
  echo $result
  hex2dec $result
}

eth_rpc_traceTransaction () {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"debug_traceTransaction\",\"params\":[\"$2\", {\"tracer\": \"callTracer\"}],\"id\":1}" "$1"
  set +x
}

eth_rpc_replayBlockTransactions () {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "{\"jsonrpc\":\"2.0\",\"method\":\"trace_replayBlockTransactions\",\"params\":[\"$2\", [\"trace\"]],\"id\":1}" "$1"
  set +x
}

eth_rpc_beacon_syncing() {
  curl "http://localhost:3500/eth/v1/node/syncing"
}

eth_rpc_syncing() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_syncing","params":[],"id":1}' "$1"
  set +x
}

gas_price() {
  nvm use 14
  RPC=${1:-"https://cloudflare-eth.com"}
  if [ "$1" == "goerli" ]; then
    RPC="https://rpc.ankr.com/eth_goerli"
  fi
  GAS_PRICE_HEX=$(curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_getBlockByNumber","params":["latest",false],"id":1}' "$RPC" | jq -r '.result.baseFeePerGas')
  ethereum-unit-converter "$GAS_PRICE_HEX" gwei eth
}

eth_rpc_json() {
  set -x
  curl -s -X POST -H "Content-Type: application/json" --data "$1" "$2"
  set +x
}

change_shell() {
  # chsh -s /bin/bash username
  chsh
}

delete_user() {
  sudo deluser --remove-home "$1"
}

shred_history() {
  shred -u ~/.bash_history && touch ~/.bash_history
}

list_users() {
  cut -d: -f1 /etc/passwd
}

kill_xorg() {
  killall xinit
}

view_incoming_outgoing_connections() {
  sudo netstat -tulpn
}

github_followers() {
  username="$1"
  username=${username:-miguelmota}
  curl --silent -H "Accept: application/json" "https://api.github.com/users/$username" | jq ".followers"
}

monitor_network_connections() {
  sudo nethogs
}

open_stickies() {
  if [[ "$unamestr" == 'Linux' ]]; then
    xpad
  fi
}

pid_info() {
  ps -Flww -p "$1"
}

list_active_shell() {
  echo $SHELL
}

# TODO: fix
unix2date() {
  date -ud "@$1" +'%Y-%m-%d %H:%M:%S'
}

clear_clipboard() {
  xsel -bc
}

rmtrash() {
  sudo rm -rf ~/.local/share/Trash/files/*
}

dnslink_hash() {
  dig "_dnslink.$1" -t TXT +short | sed -e 's/.*ipfs\/\(.*\)"/\1/'
}

floor() {
  collection="$1"
  curl -s "https://api.opensea.io/api/v1/collection/$collection" | jq '.collection.stats.floor_price'
}

list_process_using_mic() {
  grep owner_pid /proc/asound/card*/pcm*/sub*/status
}

clean_varlog() {
  /var/log -type f -name "*.gz" -exec rm -f {} \;
}

# note: if it has minus then there is no support
vim_clipboard_support() {
  vim --version | grep .xterm_clipboard -o
}

# run this if you're entering user password correctly but it still fails
reset_faillock() {
  faillog --user $USER --reset
  faillock --reset
}

ethereum_generate_private_key_show_address() {
  privateKey=$(ethereum_generate_private_key)
  echo $privateKey
  ethereum-private-key-to-address $privateKey
}

# see who is groups: root, wheel, adm, admin
get_root_users() {
  getent group root wheel adm admin
}

view_hashed_password() {
  sudo getent shadow $USER
}

security_checklist() {
  echo "check open ports"
  sudo ufw status

  echo "checking if ufw is running"
  sudo systemctl status ufw

  echo "listing active services"
  sudo systemctl list-units --type=service --state=active

  echo "disable sshd if not needed"
}

# lists current number of threads for each user
list_thread_usage() {
  ps --no-headers -Leo user | sort | uniq --count
}

# list items like apple tv, fire stick, chromecasts, ipads, printers, etc
list_local_network_items() {
  avahi-browse -a
}

docker_kill_all() {
  docker rm -f $(docker ps -aq)
  docker rmi -f $(docker images -aq)
  docker swarm leave --force
}

docker_cleanall() {
  dockerrm
  dockerrmi
  docker system prune -a -f
  docker container prune -f
  docker image prune -a -f
  docker builder prune -a -f
  docker volume prune -a -f
}

firefox_latest_version() {
  curl -s -L -I "https://www.mozilla.org/en-US/firefox/latest/releasenotes/" | grep location
}

coingecko_price() {
  coinId=$1
  days=${2:-1}
  url="https://api.coingecko.com/api/v3/coins/$coinId/market_chart?vs_currency=usd&days=$days&interval=daily"
  echo $url
  curl "$url"
}

start_opensnitch() {
  sudo opensnitchd
  sudo opensnitch-ui
}

# avahi-daemon is like bonjour on mac; it's for service discovery (ie printers)
disable_avahi() {
  sudo systemctl stop avahi-daemon
  sudo systemctl disable avahi-daemon
}

start_proxy_web() {
  mitmweb
}

start_proxy_chrome() {
  # make sure to start `mitmweb` first
  google-chrome-stable --proxy-server="http://localhost:8080"
  # and then import Authority certificate into chrome settings ~/.mitmproxy/mitmproxy-ca-cert.pem
}

disable_notifications() {
  fkill dunst
}

enable_notifications() {
  dunst &
}

list_services() {
  systemctl list-units --type=service
}

siege_rpc_json() {
  data=$1
  rpc=$2
  siege --content-type "application/json" "$rpc POST $data"
}

siege_rpc_chainId() {
  rpc=$1
  siege --content-type "application/json" "$rpc POST {\"jsonrpc\":\"2.0\",\"method\":\"eth_chainId\",\"params\":[],\"id\":1}"
}

function pascalCase() {
  perl -pe 's#(_|^)(.)#\u$2#g'
}

function snakeCase() {
  perl -pe 's#([A-Z])#_\L$1#g' | perl -pe 's#^_##'
}

markdown_viewer() {
  pandoc "$1" | firefox "data:text/html;base64,$(base64 -w 0 <&0)";
}

get_default_browser() {
  xdg-settings get default-web-browser
}

set_default_browser_firefox() {
  xdg-settings set default-web-browser firefox.desktop
}

set_default_browser_chrome() {
  xdg-settings set default-web-browser google-chrome.desktop
}

# find lines in file2 that match lines from file1
# example:
# line_match_files myaccounts.txt bigfile.csv
line_match_files() {
  file1="$1"
  file2="$2"
  cat $file1 | xargs -I {} sh -c "rg -i {} $file2"
}

reload_bspwm() {
  bspc wm -r
}

quit_bspwm() {
  bspc quit
}

bspwm_kill_nodes_in_workspace() {
  bspc query -N -d $desk -n .leaf | xargs -I {} bspc node {} --kill
}

cointop_price() {
  value="$2"
  price=$(cointop price --coin $1)
  if [ ! -z "$value" ]; then
    node -e "console.log(Number('$price'.replace(/[$,]/gi, '')) * Number('$value'))"
  else
    echo $price
  fi
}

eth_price() {
  cointop_price ethereum $1
}

btc_price() {
  cointop_price bitcoin $1
}

# example
# type
# ngrok is hashed (/home/mota/.bin/ngrok)
# rm ~/.bin/ngrok
# hash -l ngrok
# type ngrok
# ngrok is hashed (/bin/ngrok)
remove_type_hash() {
  hash -l $1
}

# returns "true" if file or dir is symlink
is_symlink() {
  test -L "$1" && echo true || echo false
}

load_direnv() {
  # # this doesn't work:
  # direnv allow .
  # this works:
  eval "$(direnv hook bash)"
}

screenshot_ui() {
  if command_exists 'gnome-screenshot'; then
    gnome-screenshot -i
  else
    if command_exists 'mate-screenshot'; then
      mate-screenshot -i
    fi
  fi
}

# vim "multiline cursor"
#Ctrl-v ................ start visual block selection
#6j .................... go down 6 lines
#I" .................... inserts " at the beginning
#<Esc><Esc> ............ finishes start
#2fdl. ................. second 'd' l (goes right) . (repeats insertion)
