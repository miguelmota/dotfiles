# Set globals
unamestr=`uname`

# Copy to clipboard
# Example
# $ echo 'hello' | copy
copy() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    pbcopy
  else
    xclip -selection c
  fi
}

# Paste from clipboard
# Example
# $ paste # pastes copies what's on clipboard
paste() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    pbpaste
  else
    xclip -selection clipboard -o
  fi
}

# Image width
# Example
# $ width image.png # 200
image_width() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    echo $(sips -g pixelWidth $1 | grep -oE "[[:digit:]]{1,}$")
  else
    identify -format '%w' "$1"
  fi
}

# Image height
# Example
# $ height image.png # 300
image_height() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    echo $(sips -g pixelHeight $1 | grep -oE "[[:digit:]]{1,}$")
  else
    identify -format '%h' "$1"
  fi
}

# Run dig and display the most useful info
# Example
# $ dig_all google.com
dig_all() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Copy with progress
# Example
# $ cp_p src/ dst/
cp_p() {
  rsync -WavP --human-readable --progress $1 $2
}

# Pretty print JSON
# Example
# $ echo '{"foo":"bar"}' | cjson
cjson() {
  local url=$(echo $1)
  if [[ "http" == $url[0,4] ]] ; then
    curl --silent $url | python -mjson.tool | pygmentize -O style=monokai -f console256 -g
  else
    cat $url | python -mjson.tool | pygmentize -O style=monokai -f console256 -g
  fi
}

# Curl pretty print with underscore
# Example
# $ curl_json_pretty_print http://example.com/data.json
curl_json_pretty_print() {
  local url="${1}"
  curl "$url" | underscore print --color | less -R
}

# Simple server
# Example
# $ server 3000 # visit http://localhost:3000
server() {
  local port="${1:-8000}"

  if [[ $* == *-o* ]]; then
    open "http://localhost:$port"
  fi

  python --version | grep 'Python 3' &> /dev/null

  if [ $? -eq 0 ]; then
    python -m http.server --bind 0.0.0.0 "$port"
  else
    python -m SimpleHTTPServer "$port"
  fi
}

# Display local IP
# Example
# $ ip_address # 10.10.10.192
ip_address() {
  # ifconfig getifaddr en0
  ifconfig | grep inet | grep broad | awk {'print $2'}
}

# List port procceses
# Example
# $ list_port_procceses 80
list_port_procceses() {
  lsof -i tcp:"${1}"
}

# Git push shortcut
# Example
# $ git_add_commit_push "my message"
git_add_commit_push() {
  local msg="${1}"
  git add . && git commit -m "$msg" && git push -u
}

# Undo a git commit ammend
# Example
# $ git_undo_ammend
git_undo_ammend() {
  git reset --soft HEAD@{1}
}

# Git blame a line
# Example
# $ git_blame_line 25 src/index.ts
git_blame_line() {
  git blame -L $1,+1 -- $2
}

git_first_commit() {
  git rev-list --max-parents=0 HEAD
}

# shows dff commits
git_branch_commits() {
  local branch="${1:-$(git branch --show-current)}"
  git cherry -v develop $branch
}

# Get load average
# Example
# $ load_average
load_average() {
  uptime | awk '{ s = ""; for (i = 10; i <= NF; i++) s = s $i " "; print s }'
}

# Get HTTP Headers only
# Example
# $ headers google.com
headers() {
  curl -s -D - "${1}" -o /dev/null
}

# Open local server
# Example
# $ open_port 3000 # goes to http://localhost:3000
open_port() {
  if [[ ${1} =~ ^[0-9]{4}$ ]]; then
    open "http://localhost:$1"
  else
    open "$@"
  fi
}

# Open item
# Example
# $ open_x http://localhost:3000 # goes to browser
# $ open_x . # open file explorer
open_x() {
  if command_exists 'xdg-open'; then
    if [[ ${1} =~ ^[0-9]{4}$ ]]; then
      xdg-open "http://localhost:$1"
    else
      xdg-open "$@"
    fi
  else
    open "$@"
  fi
}

# File search. Pass path and regex
# Example
# $ file_search 'index.js' ./
file_search() {
  find ${2} -name ${1}
}

# Recursive search and replace text
# Example
# $ search_replace ./ "*.js" temp foo
search_replace() {
  replace_or_print='-pi';
  if [ "$5" == "dry" ]; then
    replace_or_print='-p';
  fi
  find "${1}" -name "${2}" -print0 | xargs -0 perl ${replace_or_print} -e ${5} "s/${3}/${4}/g"

  #perl -pi -w -e 's/foolate/template/g;' bower_components/**/*.js
}

# Confirm dialog
# Example
# $ confirm 'continue?' && echo 'hello'
confirm() {
  # call with a prompt string or use a default
  read -r -p "${1:-Are you sure? [y/N]} " response
  case $response in
      [yY][eE][sS]|[yY])
          true
          ;;
      *)
          false
          ;;
  esac
}

# Encode base64 string
# Example
# $ base64_encode 'hello' # aGVsbG8=
base64_encode() {
  #echo -n ${1} | openssl base64
  node -e "process.stdout.write(Buffer.from(process.argv[1]).toString('base64'))" ${1}
}

# Decode base64 string
# Example
# $ base64_decode aGVsbG8= # hello
base64_decode() {
  #echo -n ${1} | openssl enc -base64 -d
  #echo -n ${1} | openssl base64 -d
  #echo -n ${1} | base64 --decode
  node -e "process.stdout.write(Buffer.from(process.argv[1], 'base64').toString('utf8'))" ${1}
}

# Unarchive files
# Example
# $ extract file.tar.gz
extract() {
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }

filesizebytes() {
  stat --printf="%s" "$1"
}

# Copy and go to directory
# Example
# $ cp_g foo/ bar/
cp_g() {
  cp $1 $2 && cd $2
}

# Move and go to directory
# Example
# $ mv_g foo/ bar/
mv_g() {
  mv $1 $2 && cd $2
}

# Make directory and go to it
# echo $TMPDIR
# Example
# $ cdmkdir foo/
cdmkdir() {
  command mkdir $1 && cd $1
}

# Make a temp directory and go to it
# Example
# $ cdmktemp
cdmktemp() {
  cd $(mktemp -d)
}

# Set output volume
# Example
# $ volume 3.5
volume() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    if [ ! -z "$1" ]; then
      # volume range: 0-7
      osascript -e "set Volume $1"
    else
      echo 'Enter volume 0-10'
    fi
  else
    if [ ! -z "$1" ]; then
      # alsamixer
      amixer sset 'Master' "$1%"
    else
      echo 'Enter volume 0-100'
    fi
  fi
}

# Mute volume
# Example
# $ volume_mute
volume_mute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer sset 'Master' mute
    amixer sset 'Speaker' mute
    amixer sset 'Bass Speaker' mute
  fi
}

# Unmute volume
# Example
# $ unvolume_mute
volume_unmute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer sset 'Master' unmute
    amixer sset 'Speaker' unmute
    amixer sset 'Bass Speaker' unmute
  fi
}

# Toggles mute
volume_toggle() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer -D pulse set Master 1+ toggle
  fi
}

volume_inc() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer sset 'Master' 3%+
  fi
}

volume_dec() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer sset 'Master' 3%-
  fi
}

mute() {
  volume_toggle
}

volume_controls() {
  if [[ "$unamestr" == 'Linux' ]]; then
    pavucontrol
  fi
}

mic_mute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer set Capture nocap
  fi
}

mic_unmute() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer set Capture cap
  fi
}

mic_toggle() {
  if [[ "$unamestr" == 'Linux' ]]; then
    amixer set Capture toggle
  fi
}

mic() {
  mic_toggle
}

# Kill processes based on regular expression
# Example
# $ kill_regex /node/
kill_regex() {
  kill $(ps aux | grep $1 | awk '{print $2}')
}

# Grep search count
# Example
# $ grep_search_count file.txt # 10
grep_search_count() {
  grep -ohr $1 $2 | wc -l
}

# Rotate Tmux windows every n seconds
# Example
# tmux_rotate
tmux_rotate() {
  TIME=${2:-30}
  watch -n$TIME tmux next-window -t $1
}

# Check if command exists
# Example
# $ command_exists foobar && echo 'exists'
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Vim specific to OS
# Example
# $ vim
function vim() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    local macvim="/usr/local/Cellar/vim/$(ls /usr/local/Cellar/vim/ | tail -1)/bin/./vim"
    eval $macvim $@
  else
    if grep -q NAME=Fedora /etc/os-release; then
      if command_exists 'gvim'; then
        local fedoravim="/usr/bin/gvim -v"
        eval $fedoravim $@
      else
        echo "Copy to clipboard might not work. Use \`gvim -v\` instead."
        echo "Install with \`sudo dnf install vim-X11\`"
        sleep 2
        local linuxvim="/usr/bin/vim"
        eval $linuxvim $@
      fi
    else
      local linuxvim="/usr/bin/vim"
      eval $linuxvim $@
    fi
  fi
}

# Sublime specific to OS
# Example
# $ open_sublime file.txt
open_sublime() {
  macsubl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"

  if [[ "$unamestr" == 'Darwin' ]]; then
    eval $macsubl $@
  else
    eval $(which subl) $@
  fi
}

# Inkscape specific to OS
# Example
# $ open_inkscape
open_inkscape() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    local macinkscape='/Applications/Inkscape.app/Contents/Resources/bin/inkscape'
    eval $macinkscape
  else
    eval $(which inkscape)
  fi
}

# List permissions as octal
# Example
# $ ls_octal_perms
ls_octal_perms() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    stat -f '%A %a %N' *
  else
    stat -c "%a %n" *
  fi
}

# Shuffle
# Example
# $ ls -l | shuf
shuf() {
    awk 'BEGIN{srand();} {printf "%06d %s\n", rand()*1000000, $0;}' | sort -n | cut -c8-
}

# Random figlet font
# Example
# $ figlet_random 'hello'
figlet_random() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    figlet -f $(ls /usr/local/Cellar/figlet/2.2.5/share/figlet/fonts/*.flf | shuf | sed -n '1p') $1
  fi
}

# Display wifi SSID connected to
# Example
# $ ssid
ssid() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'
  else
    iwgetid
  fi
}

# DNS TXT record lookup
# Example
# $ dns_txt google.com
dns_txt() {
  curl -X POST "https://mdxnorq9nj.execute-api.us-west-2.amazonaws.com/prod/txt" -d '{"domain": "'"$1"'"}'
}

# Resize image
# Example
# $ resize input.jpg 200 output.png
resize() {
  convert "$1" -resize "$2" "$3"
}

# Generate SHA3-256 hash (not keccak-256)
# Example
# sha3 'hello' # 3338be694f50c5f338814986cdf0686453a888b84f424d792af4b9202398f392
sha3() {
  echo -n "$1" | rhash --sha3-256 -
}

# Capture stdout of process
# Example
# $ capture 3021
capture() {
    sudo dtrace -p "$1" -qn '
        syscall::write*:entry
        /pid == $target && arg0 == 1/ {
            printf("%s", copyinstr(arg1, arg2));
        }
    '
}

# kill all processes returned by grep
# grepkill "Chrome"
grep_kill() {
  ps aux | grep -i $1 | awk '{print $2}' | xargs sudo kill
}

# Check SSL cert validity dates.
# Example
# $ cert_dates github.com
cert_dates() {
  # echo makes it not hang
  echo | openssl s_client -servername $1 -connect $1:443 2>/dev/null | openssl x509 -noout -dates
}

# kill process by name or port
# example:
# fkill someapp :8080 node :1111
fkill() {
  for i in $@;do export q=$i;if [[ $i == :* ]];then lsof -i$i|sed -n '1!p';
  else ps aux|grep -i $i|grep -v grep;fi|awk '{print $2}'|\
  xargs -I@ sh -c 'kill -9 @&&printf "X %s->%s\n" $q @';done
}

# Convert bytes to human readable format.
# Example
# $ bytes2mb 511705088 # 488 mb
bytes2human() {
  local B=$1
  [ $B -lt 1024 ] && echo ${B} bytes
  local KB=$(((B+512)/1024))
  [ $KB -lt 1024 ] && echo ${KB} kb
  local MB=$(((KB+512)/1024))
  [ $MB -lt 1024 ] && echo ${MB} mb
  local GB=$(((MB+512)/1024))
  [ $GB -lt 1024 ] && echo ${GB} gb
  echo $(((GB+512)/1024)) terabytes
}

# Authorize public key for SSH login
# Example
# $ ssh_add_public_key root@1.2.3.4
ssh_add_public_key() {
  cat ~/.ssh/id_rsa.pub | ssh $1 "cat >> ~/.ssh/authorized_keys"
}

start_ssh_agent() {
  ssh-agent bash
}

ssh_agent_add_key() {
  ssh-add "$1"
}

# SSH using password
# Example
# $ ssh_password root@example.com
ssh_password() {
  ssh -o PreferredAuthentications=password -o PubkeyAuthentication=no "$1"
}

# Make a temporary directory and enter it
# Example
# tmpd
tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

# Create a data URI from a file
# Example
# datauri file.txt
datauri() {
	local mimeType
	mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
# Example
# $ cert_names google.com
cert_names() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo ""; # newline

	local tmp
	tmp=$(echo -e "GET / HTTP/1.0\\nEOT" \
		| openssl s_client -connect "${domain}:443" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText
		certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_header, no_serial, no_version, \
			no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux")
		echo "Common Name:"
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//"
		echo ""; # newline
		echo "Subject Alternative Name(s):"
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# List dependencies of Go project
# Example
# $ go_list_deps
go_list_deps() {
	(
	if [[ ! -z "$1" ]]; then
		gogo "$@"
	fi

	go list -e -f '{{join .Deps "\n"}}' ./... | xargs go list -e -f '{{if not .Standard}}{{.ImportPath}}{{end}}'
	)
}

# Get colors in manual pages
# Example
# $ man cat
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# UTF-8-encode a string of Unicode symbols
# Example
# $ escape {args}
escape() {
	local args
	mapfile -t args < <(printf "%s" "$*" | xxd -p -c1 -u)
	printf "\\\\x%s" "${args[@]}"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
# Example
# $ unidecode '\N{U+0041}' # A
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Get a character’s Unicode code point
# Example
# $ codepoint A # U+0041
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Generate a random password string
# Example
# $ generate_password
generate_password() {
  openssl rand -base64 32
}

# Get the DNS host of an EC2 instance
# Example
# $ ec2_dns i-0faf8a75466c54ec5
ec2_dns() {
  region="us-east-1"
  if [ ! -z "$2" ]; then
    region="$2"
  fi
  if [ -z "$1" ]; then
    echo 'instance id is required'
    return
  fi
  aws ec2 describe-instances --instance-ids="$1" --region="$region"| jq '.Reservations[].Instances[] | "\(.PublicDnsName)"' | sed -e "s/\"//g"
}

# Get the IP address of an EC2 instance
# Example
# $ ec2_ip i-0faf8a75466c54ec5
ec2_ip() {
  region="us-east-1"
  if [ ! -z "$2" ]; then
    region="$2"
  fi
  if [ -z "$1" ]; then
    echo 'instance id is required'
    return
  fi
  aws ec2 describe-instances --instance-ids="$1" --region="$region" | jq '.Reservations[].Instances[] | "\(.PublicIpAddress)"' | sed -e "s/\"//g"
}

# Change MAC address
# Example
# $ change_mac
change_mac() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    local mac=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    interface="en0"
    sudo ifconfig $interface down
    sudo ifconfig $interface ether $mac
    sudo ifconfig $interface up
    echo "Your new physical address is $mac"
  elif [ -f "/etc/arch-release" ]; then
    local interface="wlp3s0"
    sudo ifconfig $interface down
    sudo macchanger -A $interface
    sudo ifconfig $interface up
  else
      echo "distro not supported"
  fi
}

# Print the Wifi password
# Example
# $ wifi_pass
# $ wifi_pass MyWifiSSID
wifi_pass() {
  local ssid="$(airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}')"
  if [ ! -z "$1" ]; then
    ssid="$1"
  fi

  security find-generic-password -ga "$ssid" 2>&1 | grep password: | cut -d '"' -f2
}

# Restart the wifi network manager
# Example
# $ restart_wifi
restart_wifi() {
  sudo ifconfig wlp4s0 down
  sudo ifconfig wlp4s0 up
  if command_exists 'nm-online'; then
    sudo service network-manager restart
  fi
}

forget_network() {
  nmcli connection delete "$1"
}

restart_network_manager() {
  sudo systemctl restart NetworkManager.service
}

# Print all log commit hashes
# Example
# $ git_log_all_commits
git_log_all_commits() {
  git --no-pager log --pretty=oneline | awk '{print $1}'
}

git_log_history_search() {
  git log --all --grep="$1"
}

# Convert a PNG image to SVG (requires `imagemagick` and `potrace`)
# Example
# $ png_to_svg image.png # outputs image.svg
# $ png_to_svg image.png out.svg # outputs out.svg
png_to_svg() {
  local tempfile=$(mktemp).pnm
  convert "$1" "$tempfile"

  local outfile=$(basename "$1" .png).svg
  if [ ! -z "$2" ]; then
    outfile="$2"
  fi

  potrace "$tempfile" -s -o "$outfile"
  rm -f "$tempfile"
}

# Add SSH key as authorized key on server
# Example
# $ ssh_copy_key_id root@example.com
ssh_add_authorized_key() {
  cat ~/.ssh/id_rsa.pub | ssh "$1" "cat >> ~/.ssh/authorized_keys"
}

# Read an environment variable from a .env file
# Example
# $ read_var FOO [.env]
read_var() {
  if [ -z "$1" ]; then
    echo "environment variable name is required"
    return 1
  fi

  local ENV_FILE='.env'
  if [ ! -z "$2" ]; then
    ENV_FILE="$2"
  fi

  # NOTE: will not read full entry if there's an equals sign in the value
  local VAR=$(grep $1 "$ENV_FILE" | xargs)
  IFS="=" read -ra VAR <<< "$VAR"
  echo ${VAR[1]}
}

# Delete all git branches except current one
# Example
# $ git_delete_all_branches
git_delete_all_branches() {
  local current_branch=$(git rev-parse --abbrev-ref HEAD)
  git branch | grep -vw "$current_branch" | xargs git branch -D
}

# Alias hub to git if exists
# Example
# $ git pull-request
# TODO: doesn't work on urxvt; it hangs
#git() {
#  command -v hub >/dev/null 2>&1 && hub "$@" || $(which git) "$@"
#}

# Length of string
# Example
# $ echo -n abc | length
length() {
  read a;
  echo -n $a | wc -c
}

# Lock computer
# Example
# $ lock
lock() {
  if [[ "$unamestr" == 'Linux' ]]; then
    if command_exists 'xscreensaver-command'; then
      xscreensaver-command -lock
    elif command_exists 'i3lock'; then
      i3lock -n -c 000000
    else
      echo 'no lock program found'
    fi
  fi
}

# Get all local IP addreses in network
# Example
# $ scan_ips
scan_ips() {
  sudo arp-scan -l | awk '{print $1}' | tail -n +3 | head -n -2
}

# Opens system monitor
# Example
# $ system_monitor
system_monitor() {
  if [[ "$unamestr" == 'Linux' ]]; then
    gnome-system-monitor
  fi
}

battery_time() {
  if [[ "$unamestr" == 'Linux' ]]; then
    upower -d | grep time | cut -d' ' -f 14-
  fi
}

battery_capacity() {
  if [[ "$unamestr" == 'Linux' ]]; then
    upower -d | grep capacity | awk '{print $2}'
  fi
}

resolution() {
  if [[ "$unamestr" == 'Linux' ]]; then
    xdpyinfo | awk '/dimensions/{print $2}'
  fi
}

ps_top_memory() {
  ps aux --sort=-%mem | awk 'NR<=10{print $0}'
}

keyboard_disable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # ubuntu on macbook pro
    local id=$(xinput list | sed -nE 's/.*Apple.*Keyboard.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput float $id"
    xinput float $id
  fi
}

keyboard_enable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # ubuntu on macbook pro
    local id=$(xinput list | sed -nE 's/.*Apple.*Keyboard.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput reattach $id 3"
    xinput reattach $id 3
  fi
}

touchpad_enable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    synclient TouchpadOff=0
    synclient MaxTapTime=1
    synclient PalmDetect=1
  fi
}

touchpad_disable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    synclient TouchpadOff=1
    synclient MaxTapTime=0
    synclient PalmDetect=0
  fi
}

keyboard_touchpad_disable() {
  touchpad_disable
  keyboard_disable
}

keyboard_touchpad_enable() {
  touchpad_enable
  keyboard_enable
}

touchscreen_disable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # lenovo thinkpad t480
    local id=$(xinput list | sed -nE 's/.*Touch System.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput disable $id"
    xinput disable $id
  fi
}

touchscreen_enable() {
  if [[ "$unamestr" == 'Linux' ]]; then
    # lenovo thinkpad t480
    local id=$(xinput list | sed -nE 's/.*Touch System.*id=([0-9]+).*/\1/p')
    if [ -z "$id" ]; then
      echo "device not found"
      exit 1
    fi

    echo "xinput enable $id"
    xinput enable $id
  fi
}

update_wallpaper() {
  if [ ! -z "$1" ]; then
    feh --bg-scale --zoom fill "$1"
  else
    if [ -f ~/Downloads/wallpaper.jpg ] ; then
      mv ~/Downloads/wallpaper.jpg ~/.local/share/wallpaper.jpg
    fi

    feh --bg-scale --zoom fill ~/.local/share/wallpaper.jpg
  fi
}

somafm_stream() {
  curl -vs http://ice1.somafm.com/defcon-128-mp3 2>&1 | mpv -
}

ubuntu_version() {
  cat /etc/*release | grep VERSION | head -1
}

afk() {
  echo 'suspending (sleep)...'
  if [[ "$unamestr" == 'Darwin' ]]; then
    /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend
  else
    systemctl suspend
  fi
}

hibernate() {
  echo 'hibernating...'
  if [[ "$unamestr" == 'Linux' ]]; then
    systemctl hibernate
  fi
}

restart_sxhkd() {
  pkill sxhkd && sxhkd &
}

restart_dunst() {
  pkill dunst && dunst &
}

localip() {
  if [ -f "/etc/arch-release" ]; then
    ip addr show wlp3s0 | awk '$1 == "inet" {gsub(/\/.*$/, "", $2); print $2}'
  elif [[ "$unamestr" == 'Darwin' ]]; then
    ifconfig wlan0 | awk '$1 == "inet" {print $2}'
  else
    ifconfig
  fi
}

arch_update() {
  sudo pacman -Syu
}

restart_smb() {
  systemctl restart smb
}

enable_smb() {
  systemctl enable smb
}

start_smb() {
  systemctl start smb
}

stop_smb() {
  systemctl stop smb
}

disable_smb() {
  systemctl disable smb
}

update_pacman() {
  sudo pacman -Syu
}

start_vnc() {
  x11vnc -many -usepw -localhost -display :0
}

stop_vnc() {
  fkill vnc
}

vnc_resize_macbook_air() {
  xrandr -s 1400x900
}

vnc_resize_thinkpad() {
  xrandr -s 1920x1080
}

vnc_tunnel() {
  ssh -L 5900:localhost:5900 user@host 'x11vnc -localhost -display :0'
}

renew_dhcp() {
  local interface="wlp3s0"
  sudo dhclient -v -r $interface
  restart_network_manager
}

start_ufw() {
  systemctl start ufw.service
}

enable_ufw() {
  systemctl enable ufw.service
}

stop_ufw() {
  systemctl stop ufw.service
}

ufw_status() {
  sudo ufw status
}

restart_ufw() {
  sudo ufw disable
  sudo ufw enable
}

enable_sshd() {
  systemctl enable sshd.service
}

start_sshd() {
  systemctl start sshd.service
}

stop_sshd() {
  systemctl stop sshd.service
}

disable_sshd() {
  systemctl disable sshd.service
}

restart_sshd() {
  systemctl restart sshd.service
}

start_plex() {
  systemctl start plexmediaserver.service
}

stop_plex() {
  systemctl stop plexmediaserver.service
}

enable_plex() {
  systemctl enable plexmediaserver.service
}

disable_plex() {
  systemctl disable plexmediaserver.service
}

restart_plex() {
  systemctl restart plexmediaserver.service
}

start_docker() {
  systemctl start docker
}

stop_docker() {
  systemctl stop docker
}

enable_docker() {
  systemctl enable docker
}

stop_docker() {
  systemctl stop docker
}

plex_logs() {
  tail -f /var/lib/plex/Plex\ Media\ Server/Logs/Plex\ Media\ Server.log
}

start_vpn() {
  sudo wg-quick up wg0
}

stop_vpn() {
  sudo wg-quick down wg0
}

start_bluetooth() {
  sudo systemctl start bluetooth.service
}

stop_bluetooth() {
  sudo systemctl stop bluetooth.service
}

replace_brackets_in_filenames() {
  for f in *\ *; do mv "$f" "${f//[/(}"; done
  for f in *\ *; do mv "$f" "${f//]/)}"; done
}

filepath () {
  if command_exists 'readlink'; then
    readlink -f "$1"
  else
    find "$(pwd)" -name "$1"
  fi
}

count_occurrences() {
  rg "$1" "$2" -c | cut -d':' -f2 | awk '{print $1}' | awk '{s+=$1} END {print s}'
}

reload_fonts() {
  fc-cache -vf
}

filetree() {
  ls -R | grep ":$" --color=never | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
}

publicip() {
  curl -s http://checkip.dyndns.com/ | sed 's/[^0-9\.]//g'
}

gateway_address() {
  if [[ "$unamestr" == 'Darwin' ]]; then
    route -n get default | grep gateway | rev | cut -d: -f -1 | rev
  else
    # arch
    nmcli dev show wlp3s0 | grep -m1 GATEWAY | awk '{print $2}'
  fi
}

nameservers() {
  scutil --dns | grep "nameserver\[[0-9]*\]"
}

scan() {
  sudo nmap -sn `ip | rev | cut -d. -f 2- | rev`.0/24
}

scanV() {
  sudo nmap -v -A `ip | rev | cut -d. -f 2- | rev`.0/24
}

scan_host() {
  sudo nmap -O -v -sV # ip
}

scan_ports() {
  sudo nmap -p 1-65535 -T4 -A -v
}

port_open() {
  nmap 192.168.0.1 -Pn -p 9000 # check if port is open
}

scan_net() {
  arp -a # show IPs and MACs
}

arpflush() {
  arp -d -a
}

macs() {
  sudo arp-scan -l
}

ngrep_get() {
  ngrep -W byline -qilw 'get' tcp dst port 80
}

tcpflow80() {
  sudo tcpflow -p -c -i en0 port 80 | grep -oE '(GET|POST|HEAD) .* HTTP/1.[01]|Host: .*'
}

http80() {
  sudo httpry -i en0
}

dnslookup() {
  nslookup -type=soa
}

flushdns() {
  sudo killall -HUP mDNSResponder
}

ping_port() {
  sudo nping --tcp -p # ping_port <port> <host>
}

restart_mysql() {
  mysql.server restart
}

restart_apache() {
  sudo apache2ctl restart
}

virtualbox_load_modules() {
  # arch
  sudo vboxreload
}

tmuxp_load() {
  tmuxp load "~/.tmuxp/$1.yml"
}

kernel_info() {
  # arch
  hostnamectl
}

kernel_version() {
  uname -r
}

systemd_blame() {
  # arch
  systemd-analyze blame
}


ssh_permissions() {
  # TODO: automate
  echo "
  .ssh directory: 700 (drwx------)
  public key (.pub file): 644 (-rw-r--r--)
  private key (id_rsa): 600 (-rw-------)
  home directory should not be writeable by the group or others (at most 755 (drwxr-xr-x))
  "
}

git_ignore_blame() {
  git check-ignore -v "$1"
}

restart_gpg() {
  gpgconf --kill gpg-agent
}

ip_mac() {
  sudo nmap -sn "$1"
}

burn_iso() {
  set -eux
  if [ ! -f "$1" ]; then
    echo 'File not found'
    exit 1
  fi

  sudo dd bs=4M if="$1" of="$2" conv=fdatasync status=progress
}

pcmanfm_desktop_settings () {
  pcmanfm --desktop-pref
}

start_pcmanfm_desktop () {
  pcmanfm --desktop &
}

stop_pcmanfm_desktop () {
  pcmanfm --desktop-off
}

update_mirrorlist() {
  pacman -Syyu
}

restart_polybar() {
  pkill polybar
  ~/.config/polybar/polybar.sh &
}

echostderr() {
  >&2 echo "$@"
}

# https://stackoverflow.com/a/4455706/1439168
color()(set -o pipefail;"$@" 2>&1>&3|sed $'s,.*,\e[31m&\e[m,'>&2)3>&1

google() {
  Q="$@";
  GOOG_URL='https://www.google.de/search?tbs=li:1&q=';
  AGENT="Mozilla/4.0";
  stream=$(curl -A "$AGENT" -skLm 10 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||; s|&amp||');
  echo -e "${stream//\%/\x}";
}

streamhut_shell() {
  exec &> >(nc localhost 1337)
}

# show exif data from image
exif() {
  # arch linux install:
  # yay -S perl-image-exiftool

  exiftool "$1"
}

# remove exif data from image
exif_remove() {
  # leave space after equals
  exiftool -all= "$1"
}

# $ showcolor "#ff0000"
showcolor() {
	printf '\e]4;1;%s\a\e[0;41m  \e[m' "$1"
}

cointop_sha256() {
  local version=$(curl --silent "https://api.github.com/repos/miguelmota/cointop/releases/latest" | grep -Po --color=never '"tag_name": "\K.*?(?=")')
  local url="https://github.com/miguelmota/cointop/archive/$version.tar.gz"
  echo $url
  wget_sha256 "$url"
}

stopwatch() {
  # ctrl-d to stop
  time read
}

rehash() {
  hash -r
}

reload_udev_rules() {
  sudo udevadm control --reload-rules && udevadm trigger
}

# shows list of manuals available in demu. On selection it converts man page to pdf and opens it in viewer
mansplain() {
  man -k . | dmenu -l 30 | awk '{print $1}' | xargs -r man -Tpdf | zathura -
}

# example
# mount_usb /dev/sdb1
mount_usb() {
  udisksctl mount -b "$1"
}

# example
# unmount_usb /dev/sdb1
unmount_usb() {
  udisksctl unmount -b "$1"
}

# example
# poweroff_usb /dev/sdb
poweroff_usb() {
  udisksctl power-off -b "$1"
}

restart_pulseaudio() {
  killall pulseaudio; pulseaudio --kill; pulseaudio --start
}

open_cups() {
  open http://localhost:631/
}

list_all_executables() {
  compgen -c | sort -u
}
